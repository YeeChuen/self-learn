Clarifying question based on

Array:
    Array (1D Array):
        - Binary Search
        - Sliding Window
        - 2 Pointer
        - Quick Select
        
    Matrix (2D Array):
        - Matrix Rotation/Traversal
        - DFS/BFS

Queue:
    Queue:
        - Level Order Traversal of Tree
        - BFS
        - Circular Queue

    Monotonic Queue:
        - Sliding Window Maximum

    Priority Queue:
        - Dijkstra's Algorithm
        - Prim's Algorithm
        - Heap Sort

Stack:
    Stack:
        - DFS
        - Infix to Postfix Conversion
        - Balanced Parentheses Problem

    Monotonic Stack:
        - Next Greater Element Problem
        - Largest Rectangle in Histogram

Linked List:
    Singly Linked List:
        - Floyd’s Cycle Detection Algorithm
        - Reversal of Linked List
        - Merge Sort
            def merge_sort(arr):
                # Base case: if the array has one element or is empty, it is already sorted
                if len(arr) <= 1:
                    return arr
                
                # Find the middle point to divide the array into two halves
                mid = len(arr) // 2
                
                # Recursively sort the two halves
                left_half = merge_sort(arr[:mid])
                right_half = merge_sort(arr[mid:])
                
                # Merge the sorted halves
                return merge(left_half, right_half)

            def merge(left, right):
                sorted_array = []
                i = 0
                j = 0
                
                # Traverse both arrays and add the smaller element from each half
                while i < len(left) and j < len(right):
                    if left[i] < right[j]:
                        sorted_array.append(left[i])
                        i += 1
                    else:
                        sorted_array.append(right[j])
                        j += 1
                
                # Add the remaining elements from both halves (if any)
                sorted_array.extend(left[i:])
                sorted_array.extend(right[j:])
                
                return sorted_array

    Doubly Linked List:
        - LRU Cache

    Circular Linked List:
        - Josephus Problem

Tree:
    Binary Tree:
        - Inorder, Preorder, Postorder Traversal
        - Lowest Common Ancestor (LCA)
        - Binary Tree Diameter

    Binary Search Tree:
        - Inorder Traversal for Sorted Elements
        - Insertion, Deletion, Search

    AVL Tree: (self balancing binary tree)
        - Self-Balancing Operations: uses balance factor to balance the tree, b_f = h_l(height left sub tree) - h_r

    Trie (Prefix Tree): (hash map where key are alphabet, value are hash map)
        - Autocomplete
        - Word Search in a Dictionary

    Segment Tree: (used on arrays to answer range query)
        - Range Queries
        - Range Updates

Graph:
    - Breath First Search BFS
    - Deapth First Search DFS
    - Dijkstra’s Algorithm
    - Bellman-Ford Algorithm
    - Floyd-Warshall Algorithm
    - Union-Find (Disjoint Set)

Heap (min, max):
    Heap Sort
    Dijkstra’s Algorithm
    K-th Largest/Smallest Element
    Median Maintenance


Hash Set:
    Duplicate Detection
    Union-Find
    Counting Elements in a Range

Hash Table/Map:
    Caching (LRU, LFU)
    Frequency Count
    Group Anagrams
